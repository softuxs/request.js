class HTTP{constructor(){this.client=new XMLHttpRequest()}request(options,callback=false){var public_url=new URL(options.URL);var client=this.client;if(options.hasOwnProperty("params")){for(const key in options.params){public_url.searchParams.append(key,options.params[key])}}client.open(options.method,public_url.toString(),true);if(options.hasOwnProperty("headers")){for(const key in options.headers){client.setRequestHeader(key,options.headers[key])}}if(options.hasOwnProperty("events")){for(const key in options.events){client.addEventListener(key,event=>{options.events[key](event)})}}if(options.hasOwnProperty("body")){client.send(options.body)}else{client.send(null)}client.onreadystatechange=function(event){if(this.readyState==client.DONE){var planText=this.getAllResponseHeaders();var headers={};var array=planText.trim().split(/[\r\n]+/);array.forEach(function(line){const parts=line.split(': ');const header=parts.shift();const value=parts.join(': ');headers[header]=value});headers["statusCode"]=this.status;callback?callback(headers,this.response):false}}}GET(options,callback=false){options.method="GET";this.request(options,callback)}POST(options,callback=false){options.method="POST";this.request(options,callback)}UPDATE(options,callback=false){options.method="PUT";this.request(options,callback)}DELETE(options,callback=false){options.method="DELETE";this.request(options,callback)}OPTIONS(options,callback=false){options.method="OPTIONS";this.request(options,callback)}PUT(options,callback=false){options.method="PUT";this.request(options,callback)}}class URLS{constructor(){var local=window.location.protocol+"//"+window.location.hostname;this.local=local.toLocaleLowerCase();this.current=this.local+window.location.pathname}}const MyRequest=new HTTP();var local='';var i=window.location.pathname.replace('/','');var parts=i.split('/');parts.pop();var x='';for(var k of parts){x+=k+'/'}local=window.location.protocol+"//"+window.location.hostname+'/'+x;